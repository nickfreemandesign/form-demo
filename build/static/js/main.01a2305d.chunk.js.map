{"version":3,"sources":["components/Common/styles.css.tsx","components/App/styles.css.tsx","components/Theme/index.tsx","components/MainForm/styles.css.tsx","components/Loading/styles.css.tsx","components/Loading/index.tsx","components/FormStart/styles.css.tsx","components/FormStart/index.tsx","components/FormProgress/styles.css.tsx","components/FormProgress/index.tsx","components/FormSection1/styles.css.tsx","components/FormSection1/index.tsx","components/FormSection2/styles.css.tsx","components/FormSection2/index.tsx","components/FormComplete/styles.css.tsx","components/FormComplete/index.tsx","components/MainForm/index.tsx","components/App/index.tsx","styles.css.tsx","serviceWorker.ts","index.tsx"],"names":["FForm","styled","Form","P","p","theme","font","family","primary","color","size","m","H1","h1","l","UL","ul","LI","li","FField","Field","backgroundColor","Button","button","AppContainer","div","AppContent","ThemeButton","common","s","xl","form","error","light","dark","themes","baseStyled","FormContainer","LoadingContainer","LoadingIcon","svg","Loading","width","height","viewBox","xmlns","fill","style","fillRule","transform","strokeWidth","strokeOpacity","cx","cy","r","d","attributeName","type","from","to","dur","repeatCount","FormStartContainer","StartButton","FormStart","sfv","onClick","ProgressContainer","ProgressSection","FormProgress","step","stepOneComplete","stepTwoComplete","x","y","textAnchor","fontSize","fontFamily","dy","FormControls","FormError","FormValidationSchema","Yup","shape","email","required","password","matches","FormSection1","withFormik","mapPropsToValues","props","fv","validationSchema","handleSubmit","values","formikBag","touched","errors","isSubmitting","name","placeholder","value","fontStyle","autoComplete","disabled","fullname","age","min","max","FormSection2","back","FormCompleteContainer","FormComplete","resubmitForm","MainForm","useState","formValues","setFormValues","setStep","isLoaded","setLoading","handleStepForward","setTimeout","App","toggleTheme","GlobalStyle","createGlobalStyle","reset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"u7CAGO,IAAMA,EAAQC,kBAAOC,IAAPD,CAAH,KAKLE,EAAIF,UAAOG,EAAV,KACK,qBAAEC,MAAiBC,KAAKC,OAAOC,WACrC,qBAAGH,MAAkBI,SACjB,qBAAGJ,MAAkBC,KAAKI,KAAKC,KAInCC,EAAKX,UAAOY,GAAV,KACI,qBAAGR,MAAkBC,KAAKC,OAAOC,WACvC,qBAAGH,MAAkBI,SAClB,qBAAGJ,MAAkBC,KAAKI,KAAKI,KAKlCC,EAAKd,UAAOe,GAAV,KAKFC,EAAKhB,UAAOiB,GAAV,KACI,qBAAGb,MAAkBC,KAAKC,OAAOC,WACvC,qBAAGH,MAAkBI,SAClB,qBAAGJ,MAAkBC,KAAKI,KAAKC,KAKlCQ,EAASlB,kBAAOmB,IAAPnB,CAAH,KAEH,qBAAGI,MAAkBC,KAAKI,KAAKC,KAEvB,kBAAyC,UAAzC,EAAGN,MAAkBgB,gBAA8B,QAAU,WAExEC,EAASrB,UAAOsB,OAAV,KACN,qBAAGlB,MAAkBgB,mBACf,qBAAGhB,MAAkBC,KAAKC,OAAOC,WACnC,qBAAGH,MAAkBC,KAAKI,KAAKC,KAMxB,kBAAyC,UAAzC,EAAGN,MAAkBgB,gBAA8B,QAAU,W,6kBChD9E,IAAMG,EAAevB,UAAOwB,IAAV,KACZ,qBAAGpB,MAAkBI,SACV,qBAAEJ,MAAiBgB,mBAK9BK,EAAazB,UAAOwB,IAAV,KACV,qBAAGpB,MAAkBI,SASrBkB,EAAc1B,kBAAOqB,EAAPrB,CAAH,KACX,kBAA+B,UAA/B,EAAGI,MAAkBI,MAAoB,QAAU,WAMxC,kBAAyC,UAAzC,EAAGJ,MAAkBgB,gBAA8B,QAAU,W,QCzB/EO,EAAS,CACXtB,KAAM,CACFI,KAAM,CACFmB,EAAG,QACHlB,EAAG,QACHG,EAAG,SACHgB,GAAI,QAERvB,OAAQ,CACJC,QAAS,cAGjBuB,KAAM,CACFC,MAAO,QAITC,EAAK,aACPxB,MAAO,QACPY,gBAAiB,SACdO,GAGDM,EAAI,aACNzB,MAAO,QACPY,gBAAiB,SACdO,GAGMO,EAAS,CAClBF,MAAM,eAAKA,GACXC,KAAK,eAAKA,IAIQE,U,gJCnCf,IAAMC,EAAgBpC,UAAOwB,IAAV,KACF,kBAA8C,UAA9C,EAAGpB,MAAuBgB,gBAA8B,QAAU,W,yLCCnF,IAAMiB,EAAmBrC,UAAOwB,IAAV,KAIhBc,EAActC,UAAOuC,IAAV,KACV,kBAA8C,UAA9C,EAAGnC,MAAuBgB,gBAA8B,QAAU,WCqBjEoB,MA1Bf,WAEI,OACI,kBAACH,EAAD,KACI,kBAACC,EAAD,CAAaG,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,MAAM,8BAC5D,uBAAGC,KAAK,OAAOC,MAAO,CAAEC,SAAU,YAC9B,uBAAGC,UAAU,iBAAiBF,MAAO,CAAEG,YAAa,IAChD,4BAAQC,cAAc,KAAKC,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC7C,0BAAMC,EAAE,+BACJ,sCACIC,cAAc,YACdC,KAAK,SACLC,KAAK,UACLC,GAAG,YACHC,IAAI,KACJC,YAAY,mBAKhC,6BACA,kBAACjD,EAAD,+C,wMCtBL,IAAMkD,EAAqB7D,UAAOwB,IAAV,KAElBsC,EAAc9D,kBAAOqB,EAAPrB,CAAH,KCgBT+D,EAhBG,SAAC,GAAe,IAAdC,EAAa,EAAbA,IAEhB,OACE,kBAACH,EAAD,KACI,kBAAClD,EAAD,kDACA,kBAACT,EAAD,8DACA,kBAACA,EAAD,8DACF,kBAAC4D,EAAD,CACIN,KAAK,SACLS,QAAS,kBAAMD,MAFnB,W,yPCVD,IAAME,EAAoBlE,UAAOwB,IAAV,KAOjB2C,EAAkBnE,UAAOwB,IAAV,KCkBb4C,MAxBf,YAAmC,IAAZC,EAAW,EAAXA,KACbC,EAA2B,IAATD,EAAa,YAAeA,EAAO,EAAK,QAAU,OACpEE,EAA2B,IAATF,EAAa,YAAeA,EAAO,EAAK,QAAU,OAE1E,OACQ,kBAACH,EAAD,KACI,kBAACC,EAAD,KACI,yBAAK1B,MAAM,KAAKC,OAAO,KAAKC,QAAQ,eAChC,4BAAQQ,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAAMR,KAAMyB,IACxC,0BAAME,EAAE,MAAMC,EAAE,MAAMC,WAAW,SAAS7B,KAAK,QAAQ8B,SAAS,QAAQC,WAAW,QAAQC,GAAG,QAA9F,KAFJ,qBAMJ,kBAACV,EAAD,KACI,yBAAK1B,MAAM,KAAKC,OAAO,KAAKC,QAAQ,eAChC,4BAAQQ,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAAMR,KAAM0B,IACxC,0BAAMC,EAAE,MAAMC,EAAE,MAAMC,WAAW,SAAS7B,KAAK,QAAQ8B,SAAS,QAAQC,WAAW,QAAQC,GAAG,QAA9F,KAFJ,uB,+QCdb,IAAMC,GAAe9E,UAAOwB,IAAV,MAKZuD,GAAY/E,kBAAOE,EAAPF,CAAH,MCgBhBgF,GAAuBC,MAAaC,MAAM,CAC5CC,MAAOF,MACFG,SAAS,mCACTD,QACLE,SAAUJ,MACLG,SAAS,8BACTE,QACG,iEAHE,2GAoDCC,GAhBMC,YAAgD,CACjEC,iBAAkB,SAAAC,GACd,MAAO,CACHP,MAAOO,EAAMC,GAAGR,MAChBE,SAAUK,EAAMC,GAAGN,WAG3BO,iBAAkBZ,GAClBa,aAAc,SAACC,EAAoBC,GAC/BA,EAAUL,MAAM1B,IAAhB,eACO+B,EAAUL,MAAMC,GADvB,GAEOG,MAXMN,EA3BF,SAACE,GAA0C,IAClDM,EAA0CN,EAA1CM,QAASC,EAAiCP,EAAjCO,OAAQC,EAAyBR,EAAzBQ,aAAcJ,EAAWJ,EAAXI,OAEvC,OACI,kBAAC/F,EAAD,KACI,kBAACY,EAAD,eACA,kBAACT,EAAD,sCACA,kBAACgB,EAAD,CAAQsC,KAAK,QAAQ2C,KAAK,QAAQC,YAAY,qBAAqBC,MAAOP,EAAOX,QAChFa,EAAQb,OAASc,EAAOd,OAAS,kBAACJ,GAAD,KAAYkB,EAAOd,OACrD,kBAACxE,EAAD,iBACA,kBAACT,EAAD,sBAAiB,wBAAI4C,MAAO,CAACwD,UAAW,WAAvB,QAAjB,UACA,kBAACxF,EAAD,KACI,kBAACE,EAAD,8BACA,kBAACA,EAAD,sBACA,kBAACA,EAAD,sBACA,kBAACA,EAAD,mBACA,kBAACA,EAAD,oCAEJ,kBAACE,EAAD,CAAQsC,KAAK,WAAW2C,KAAK,WAAWI,aAAa,aACpDP,EAAQX,UAAYY,EAAOZ,UAAY,kBAACN,GAAD,KAAYkB,EAAOZ,UAC3D,kBAACP,GAAD,KACI,kBAACzD,EAAD,CAAQyB,MAAO,CAAC1B,gBAAiB,kBAAmBoC,KAAK,SAASgD,SAAUN,GAA5E,e,2NCvDT,IAAMpB,GAAe9E,UAAOwB,IAAV,MAKZuD,GAAY/E,kBAAOE,EAAPF,CAAH,MCShBgF,GAAuBC,MAAaC,MAAM,CAC5CuB,SAAUxB,MACLG,SAAS,+BACdsB,IAAKzB,MACA0B,IAAI,EAAG,gDACPC,IAAI,IAAK,iCAwCHC,GAhBMrB,YAAgD,CACjEC,iBAAkB,SAAAC,GACd,MAAO,CACHe,SAAUf,EAAMC,GAAGc,SACnBC,IAAKhB,EAAMC,GAAGe,MAGtBd,iBAAkBZ,GAClBa,aAAc,SAACC,EAAoBC,GAC/BA,EAAUL,MAAM1B,IAAhB,eACO+B,EAAUL,MAAMC,GADvB,GAEOG,MAXMN,EApBF,SAACE,GAA0C,IAClDM,EAAgDN,EAAhDM,QAASC,EAAuCP,EAAvCO,OAAQC,EAA+BR,EAA/BQ,aAAcY,EAAiBpB,EAAjBoB,KAAMhB,EAAWJ,EAAXI,OAC7C,OACI,kBAAC/F,EAAD,KACI,kBAACY,EAAD,kBACA,kBAACT,EAAD,oCACA,kBAACgB,EAAD,CAAQsC,KAAK,OAAO2C,KAAK,WAAWC,YAAY,WAAWC,MAAOP,EAAOW,WACxET,EAAQS,UAAYR,EAAOQ,UAAY,kBAAC,GAAD,KAAYR,EAAOQ,UAC3D,kBAAC9F,EAAD,YACA,kBAACO,EAAD,CAAQsC,KAAK,MAAM2C,KAAK,QACvBH,EAAQU,KAAOT,EAAOS,KAAO,kBAAC,GAAD,KAAYT,EAAOS,KAEjD,kBAAC,GAAD,KACI,kBAACrF,EAAD,CAAQmC,KAAK,SAASS,QAAS6C,GAA/B,UACA,kBAACzF,EAAD,CAAQyB,MAAO,CAAE1B,gBAAiB,kBAAoBoC,KAAK,SAASgD,SAAUN,GAA9E,e,yMCtCT,IAAMa,GAAwB/G,UAAOwB,IAAV,MAKVxB,UAAOsB,OAAV,MCWN0F,OAdf,YAA2C,IAApBC,EAAmB,EAAnBA,aAEnB,OACI,kBAACF,GAAD,KACI,kBAACpG,EAAD,mBACA,kBAACT,EAAD,4EACA,kBAACA,EAAD,0DACA,kBAACmB,EAAD,CAAQmC,KAAK,SAASS,QAASgD,GAA/B,kBCMCC,GAAW,WAAO,IAAD,EAEUC,mBAAsB,CACtDhC,MAAO,GACPE,SAAU,GACVoB,SAAU,GACVC,IAAK,IANiB,mBAEnBU,EAFmB,KAEPC,EAFO,OASFF,mBAAiB,GATf,mBASnB9C,EATmB,KASbiD,EATa,OAWKH,oBAAkB,GAXvB,mBAWnBI,EAXmB,KAWTC,EAXS,KAapBC,EAAoB,SAACL,GACnBA,GAAYC,EAAcD,GAC9BE,EAAQjD,EAAO,IAyBnB,OACI,oCACQkD,EACI,kBAAC,EAAD,MACF,kBAACnF,EAAD,KACGiC,EAAO,GAAK,kBAAC,EAAD,CAAcA,KAAMA,IACvB,IAATA,GAAc,kBAAC,EAAD,CACXL,IAAKyD,IACC,IAATpD,GAAc,kBAAC,GAAD,CACXsB,GAAIyB,EACJpD,IAAKyD,IACC,IAATpD,GAAc,kBAAC,GAAD,CACXsB,GAAIyB,EACJN,KAnCG,WACnBQ,EAAQjD,EAAO,IAmCCL,IAhCK,SAACoD,GACtBK,EAAkBL,GAClBI,GAAW,GACXE,YAAW,WACPF,GAAW,KACZ,QA4BmB,IAATnD,GAAc,kBAAC,GAAD,CACX4C,aA1BC,WACjBI,EAAc,CACVlC,MAAO,GACPE,SAAU,GACVoB,SAAU,GACVC,IAAK,IAETY,EAAQ,SCxBDK,OAxBf,WAAgB,IAAD,EAEgBR,mBAAS,SAFzB,mBAEN/G,EAFM,KAECwH,EAFD,KAYb,OACE,kBAAC,gBAAD,CAAexH,MAAiB,UAAVA,EAAoB8B,EAAOF,MAAQE,EAAOD,MAC9D,kBAACV,EAAD,KACE,kBAACG,EAAD,CAAauC,QAXnB,WAEI2D,EADY,UAAVxH,EACU,OAEA,WAOV,gBACA,kBAACqB,EAAD,KACE,kBAAC,GAAD,U,mGCpBH,IAAMoG,GAAcC,4BAAH,KACrBC,MCQiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACV,GAAD,MACA,kBAAC,GAAD,OAEFW,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjH,GACLkH,QAAQlH,MAAMA,EAAMmH,c","file":"static/js/main.01a2305d.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport { Field, Form } from 'formik'\n\nexport const FForm = styled(Form)`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const P = styled.p`\n    font-family: ${({theme}) => theme.font.family.primary};\n    color: ${({ theme }) => theme.color};\n    font-size: ${({ theme }) => theme.font.size.m};\n    line-height: 2; \n`;\n\nexport const H1 = styled.h1`\n    font-family: ${({ theme }) => theme.font.family.primary};\n    color: ${({ theme }) => theme.color};\n    font-size:${({ theme }) => theme.font.size.l};\n    font-weight: bold;\n    margin: 20px 0;\n`;\n\nexport const UL = styled.ul`\n    list-style-type: circle;\n    margin-left: 20px;\n`;\n\nexport const LI = styled.li`\n    font-family: ${({ theme }) => theme.font.family.primary};\n    color: ${({ theme }) => theme.color};\n    font-size:${({ theme }) => theme.font.size.m};\n    line-height: 1;\n    margin: 5px 0;\n`;\n\nexport const FField = styled(Field)`\n    margin: 5px 0 15px 0; \n    font-size:${({ theme }) => theme.font.size.m};\n    padding: 4px;\n    border: 1px solid ${({ theme }) => theme.backgroundColor === 'white' ? 'black' : 'white'};\n`\nexport const Button = styled.button`\n    color: ${({ theme }) => theme.backgroundColor};\n    font-family: ${({ theme }) => theme.font.family.primary};\n    font-size: ${({ theme }) => theme.font.size.m};\n    font-weight: bold;\n    letter-spacing: 2px;\n    max-width: 200px;\n    padding: 10px;\n    margin: 20px 0;\n    background-color: ${({ theme }) => theme.backgroundColor === 'white' ? 'black' : 'white'};\n    &:hover{\n        cursor: pointer;    \n    }\n`;","import styled from 'styled-components'\nimport { Button } from '../Common/styles.css'\n\nexport const AppContainer = styled.div`\n    color: ${({ theme }) => theme.color};\n    background-color: ${({theme}) => theme.backgroundColor};\n    height: 100vh;\n    width: 100vw;\n`;\n\nexport const AppContent = styled.div`\n    color: ${({ theme }) => theme.color};\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 100%;\n`;\n\nexport const ThemeButton = styled(Button)`\n    color: ${({ theme }) => theme.color === 'black' ? 'white' : 'black'};\n    width: 100px;\n    padding: 10px;\n    margin: 20px;\n    right: 0;\n    position: absolute;\n    background-color: ${({ theme }) => theme.backgroundColor === 'white' ? 'black' : 'white'};\n`;\n\n","import baseStyled, { ThemedStyledInterface } from 'styled-components';\n\nconst common = {\n    font: {\n        size: {\n            s: '.5rem',\n            m: '.8rem',\n            l: '1.5rem',\n            xl: '2rem'\n        },\n        family: {\n            primary: 'Helvetica',\n        },\n    },\n    form: {\n        error: 'red',\n    }\n}\n\nconst light = {\n    color: \"black\",\n    backgroundColor: 'white',\n    ...common\n}\n\nconst dark = {\n    color: \"white\",\n    backgroundColor: 'black',\n    ...common\n}\n\nexport const themes = {\n    light: {...light},\n    dark: {...dark}\n};\n\nexport type Themes = typeof themes;\nexport const styled = baseStyled as ThemedStyledInterface<Themes>;","import styled from 'styled-components'\n\nexport const FormContainer = styled.div`\n    border: 1px solid ${({ theme }: any) => theme.backgroundColor === 'white' ? 'black' : 'white'};\n    padding: 20px;\n    border-radius: 5px;\n`\n","import styled from 'styled-components';\n\n\n\nexport const LoadingContainer = styled.div`\n    text-align: center;\n`;\n\nexport const LoadingIcon = styled.svg`\n    stroke: ${({ theme }: any) => theme.backgroundColor === 'white' ? 'black' : 'white'};\n`;","import React from 'react';\nimport { LoadingContainer, LoadingIcon } from './styles.css'\nimport { H1 } from '../Common/styles.css'\n\nfunction Loading() {\n\n    return (\n        <LoadingContainer>\n            <LoadingIcon width=\"100\" height=\"100\" viewBox=\"0 0 38 38\" xmlns=\"http://www.w3.org/2000/svg\">\n                <g fill=\"none\" style={{ fillRule: 'evenodd' }}>\n                    <g transform=\"translate(1 1)\" style={{ strokeWidth: 2}}>\n                        <circle strokeOpacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\n                        <path d=\"M36 18c0-9.94-8.06-18-18-18\">\n                            <animateTransform\n                                attributeName=\"transform\"\n                                type=\"rotate\"\n                                from=\"0 18 18\"\n                                to=\"360 18 18\"\n                                dur=\"1s\"\n                                repeatCount=\"indefinite\" />\n                        </path>\n                    </g>\n                </g>\n            </LoadingIcon>\n            <br/>\n            <H1>Submitting your form, please wait...</H1>\n        </LoadingContainer>\n    );\n}\n\nexport default Loading;\n","import styled from 'styled-components'\nimport { Button } from '../Common/styles.css'\n\nexport const FormStartContainer = styled.div``\n\nexport const StartButton = styled(Button)`\n    background-color: mediumseagreen;\n    margin: 10px 0;\n`\n","import React from 'react';\nimport { FormStartContainer, StartButton } from './styles.css'\nimport { P, H1 } from '../Common/styles.css'\n\n\nconst FormStart = ({sfv}:any) => {\n\n    return (\n      <FormStartContainer>\n          <H1>Welcome! You are about to fill out a form</H1>\n          <P>This form will guide you through a multi-step process</P>\n          <P>When you are ready, click the \"Start\" button to begin</P>\n        <StartButton \n            type=\"button\"\n            onClick={() => sfv()}>\n                Start\n        </StartButton>\n      </FormStartContainer>\n    );\n}\n\nexport default FormStart","import styled from 'styled-components';\n\nexport const ProgressContainer = styled.div`\n    text-align: center;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n`;\n\nexport const ProgressSection = styled.div`\n    \n`;","import React from 'react';\nimport { ProgressContainer, ProgressSection } from './styles.css'\n\nfunction FormProgress({step}:any) {\n    const stepOneComplete = step === 1 ? \"goldenrod\" : (step > 1) ? 'green' : 'grey'\n    const stepTwoComplete = step === 2 ? \"goldenrod\" : (step > 2) ? 'green' : 'grey'\n\n    return (\n            <ProgressContainer>\n                <ProgressSection>\n                    <svg width=\"50\" height=\"50\" viewBox=\"0 0 250 250\">\n                        <circle cx=\"125\" cy=\"125\" r=\"100\" fill={stepOneComplete} />\n                        <text x=\"50%\" y=\"50%\" textAnchor=\"middle\" fill=\"white\" fontSize=\"100px\" fontFamily=\"Arial\" dy=\".3em\">1</text>\n                        Step 1 Indicator\n                    </svg>\n                </ProgressSection>\n                <ProgressSection>\n                    <svg width=\"50\" height=\"50\" viewBox=\"0 0 250 250\">\n                        <circle cx=\"125\" cy=\"125\" r=\"100\" fill={stepTwoComplete} />\n                        <text x=\"50%\" y=\"50%\" textAnchor=\"middle\" fill=\"white\" fontSize=\"100px\" fontFamily=\"Arial\" dy=\".3em\">2</text>\n                        Step 2 Indicator\n                    </svg>\n                </ProgressSection>\n            </ProgressContainer>\n    );\n}\n\nexport default FormProgress;\n","import styled from 'styled-components'\nimport { P  } from '../Common/styles.css'\n\nexport const FormControls = styled.div`\n    display: flex;\n    justify-content: space-around;\n`;\n\nexport const FormError = styled(P)`\n    color: red;\n    white-space: pre;\n    line-height: 1;\n`;\n\n","import React from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, FormikBag } from 'formik';\n\nimport { FormControls, FormError } from './styles.css'\nimport { P, H1, UL, LI, FField, FForm, Button } from '../Common/styles.css'\n\ninterface FormValues {\n    email: string;\n    password: string;\n}\n\ninterface IFormValues {\n    email?: string;\n    password?: string;\n    fullname?: string;\n    age?: number;\n}\n\ninterface FormSection1Props {\n    initialEmail?: string;\n    initialPassword?: string;\n}\n\nconst FormValidationSchema = Yup.object().shape({\n    email: Yup.string()\n        .required('please enter an e-mail address.')\n        .email(),\n    password: Yup.string()\n        .required('please enter your password')\n        .matches(\n            /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n            `Must Contain 8 Characters, one Uppercase \\none Lowercase, One Number \\nand one Special Case Character`\n        )\n});\n\n\nconst FormFields = (props: any & FormikProps<FormValues>) => {\n    const { touched, errors, isSubmitting, values } = props;\n    \n    return (\n        <FForm>\n            <H1>E-mail</H1>\n            <P>Please enter an email address</P>\n            <FField type=\"email\" name=\"email\" placeholder=\"example@domain.com\" value={values.email}/>\n            {touched.email && errors.email && <FormError>{errors.email}</FormError>}\n            <H1>Password</H1>\n            <P>Your password <em style={{fontStyle: 'italic'}}>must</em> have:</P>\n            <UL>\n                <LI>At least 8 characters</LI>\n                <LI>One Uppercase</LI>\n                <LI>One Lowercase</LI>\n                <LI>One Number</LI>\n                <LI>One Special Case Character</LI>\n            </UL>\n            <FField type=\"password\" name=\"password\" autoComplete=\"password\"/>\n            {touched.password && errors.password && <FormError>{errors.password}</FormError>}\n            <FormControls>\n                <Button style={{backgroundColor: 'mediumseagreen'}} type=\"submit\" disabled={isSubmitting}> Next </Button>\n            </FormControls>\n        </FForm>\n    );\n};\n\nconst FormSection1 = withFormik<any | FormSection1Props, FormValues>({\n    mapPropsToValues: props => {\n        return {\n            email: props.fv.email,\n            password: props.fv.password,\n        };\n    },\n    validationSchema: FormValidationSchema,\n    handleSubmit: (values: FormValues, formikBag: FormikBag<any, any>) => {\n        formikBag.props.sfv({\n            ...formikBag.props.fv,\n            ...values\n        })\n    },\n})(FormFields);\n\nexport default FormSection1\n\n","import styled from 'styled-components'\nimport { P } from '../Common/styles.css'\n\nexport const FormControls = styled.div`\n    display: flex;\n    justify-content: space-around;\n`;\n\nexport const FormError = styled(P)`\n    color: red;\n`;\n\n","import React from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, FormikBag } from 'formik';\n\nimport { FormControls, FormError } from './styles.css'\nimport { P, H1, FField, FForm, Button } from '../Common/styles.css'\n\ninterface FormValues {\n    fullname: string;\n    age: string;\n}\n\ninterface FormSection2Props {\n    fullname?: string;\n    age?: string;\n}\n\nconst FormValidationSchema = Yup.object().shape({\n    fullname: Yup.string()\n        .required(\"please enter your full name\"),\n    age: Yup.number()\n        .min(2, \"you must be at least 2 years old to register\")\n        .max(120, \"you are too old to register\")\n});\n\n\nconst FormFields = (props: any & FormikProps<FormValues>) => {\n    const { touched, errors, isSubmitting, back, values } = props;\n    return (\n        <FForm>\n            <H1>Full Name</H1>\n            <P>Please enter your full name</P>\n            <FField type=\"name\" name=\"fullname\" placeholder=\"John Doe\" value={values.fullname}/>\n            {touched.fullname && errors.fullname && <FormError>{errors.fullname}</FormError>}\n            <H1>Age</H1>\n            <FField type=\"age\" name=\"age\" />\n            {touched.age && errors.age && <FormError>{errors.age}</FormError>}\n\n            <FormControls>\n                <Button type=\"button\" onClick={back}> Back </Button>\n                <Button style={{ backgroundColor: 'mediumseagreen' }} type=\"submit\" disabled={isSubmitting}> Next </Button>\n            </FormControls>\n        </FForm>\n    );\n};\n\nconst FormSection2 = withFormik<any | FormSection2Props, FormValues>({\n    mapPropsToValues: props => {\n        return {\n            fullname: props.fv.fullname,\n            age: props.fv.age,\n        };\n    },\n    validationSchema: FormValidationSchema,\n    handleSubmit: (values: FormValues, formikBag: FormikBag<any, any>) => {\n        formikBag.props.sfv({\n            ...formikBag.props.fv,\n            ...values\n        })\n    },\n})(FormFields);\n\nexport default FormSection2\n\n","import styled from 'styled-components'\n\nexport const FormCompleteContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const Resubmit = styled.button`\n    \n`;\n\n","import React from 'react';\nimport { FormCompleteContainer } from './styles.css'\nimport { P, H1, Button } from '../Common/styles.css'\n\nfunction FormComplete({resubmitForm}:any) {\n\n    return (\n        <FormCompleteContainer>\n            <H1>Complete !</H1>\n            <P>Your form has been submitted. You may close your browser window or </P>\n            <P>submit another form by clicking the button below.</P>\n            <Button type=\"button\" onClick={resubmitForm}>\n                Submit Again\n            </Button>\n        </FormCompleteContainer>\n    );\n}\n\nexport default FormComplete;\n","import React, { useState } from 'react';\nimport {FormContainer } from './styles.css'\n\nimport Loading from '../Loading'\nimport FormStart from '../FormStart'\nimport FormProgress from '../FormProgress'\nimport FormSection1 from '../FormSection1'\nimport FormSection2 from '../FormSection2'\nimport FormComplete from '../FormComplete'\n\ninterface IFormValues {\n    email?: string;\n    password?: string;\n    fullname?: string;\n    age?: number;\n}\n\nexport const MainForm = () => {\n\n    const [formValues, setFormValues] = useState<IFormValues>({\n        email: '',\n        password: '',\n        fullname: '',\n        age: 0\n    }) \n\n    const [step, setStep] = useState<number>(0)\n\n    const [isLoaded, setLoading] = useState<boolean>(false)\n\n    const handleStepForward = (formValues?:any) => {\n        if (formValues) setFormValues(formValues)\n        setStep(step + 1)\n    }\n\n    const handleStepBack = () => {\n        setStep(step - 1)\n    }\n\n    const handleSubmission = (formValues: any) => {\n        handleStepForward(formValues)\n        setLoading(true)\n        setTimeout(() => {\n            setLoading(false)\n        }, 2000)\n    }\n\n    const resubmitForm = () => {\n        setFormValues({\n            email: '',\n            password: '',\n            fullname: '',\n            age: 0\n        })\n        setStep(1)\n    }\n\n    return (\n        <>\n            {   isLoaded  ?\n                    <Loading/>\n                : <FormContainer>\n                    {step > 0 && <FormProgress step={step}/>}\n                    {step === 0 && <FormStart\n                        sfv={handleStepForward} />}\n                    {step === 1 && <FormSection1\n                        fv={formValues}\n                        sfv={handleStepForward} />}\n                    {step === 2 && <FormSection2\n                        fv={formValues}\n                        back={handleStepBack}\n                        sfv={handleSubmission} />}\n                    {step === 3 && <FormComplete\n                        resubmitForm={resubmitForm} />}\n                  </FormContainer>\n            }\n        </>\n    );\n}\n\n\n","import React, { useState } from 'react';\nimport { AppContainer, ThemeButton, AppContent } from './styles.css'\nimport { ThemeProvider } from 'styled-components';\nimport { themes } from '../Theme';\nimport { MainForm } from '../MainForm'\n\nfunction App() {\n\n  const [theme, toggleTheme] = useState('light')\n\n  function handleToggleTheme() {\n    if (theme === 'light') {\n      toggleTheme('dark')\n    } else {\n      toggleTheme('light')\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme === 'light' ? themes.light : themes.dark}>\n      <AppContainer>\n        <ThemeButton onClick={handleToggleTheme}>Change Theme</ThemeButton>\n        <AppContent>\n          <MainForm/>\n        </AppContent>\n      </AppContainer>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import reset from 'styled-reset';\nimport { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n ${reset}\n`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { GlobalStyle } from './styles.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}